#!/usr/bin/env python3
"""
Simple Test for Delta Neutral Task Framework

A simplified test runner that demonstrates the core functionality
without complex import dependencies.
"""

import asyncio
import sys
import os
from pathlib import Path

# Add src and tests to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

# Configure test environment
os.environ['ENVIRONMENT'] = 'test'

from infrastructure.logging import get_logger
from infrastructure.logging.factory import LoggerFactory
from infrastructure.logging.structs import (
    LoggingConfig, ConsoleBackendConfig, PerformanceConfig, RouterConfig
)

# Set up test logging
LoggerFactory._default_config = LoggingConfig(
    environment="test",
    console=ConsoleBackendConfig(enabled=True, min_level="INFO", color=True),
    performance=PerformanceConfig(buffer_size=10, batch_size=1, dispatch_interval=0.001),
    router=RouterConfig(default_backends=["console"])
)


async def test_mock_system():
    """Test the mock system works correctly."""
    print("üß™ Testing Mock System...")
    
    try:
        # Import mock system
        from tests.trading.mocks import DualExchangeMockSystem
        from exchanges.structs import Symbol, ExchangeEnum, Side
        from exchanges.structs.common import AssetName
        
        # Create test symbol
        test_symbol = Symbol(base=AssetName('BTC'), quote=AssetName('USDT'))
        
        # Setup mock system
        mock_system = DualExchangeMockSystem()
        await mock_system.setup([test_symbol])
        
        print("‚úÖ Mock system initialized successfully")
        
        # Test market data control
        mock_system.setup_profitable_arbitrage(test_symbol, 50000.0, 50100.0)
        
        buy_ticker = mock_system.public_exchanges[Side.BUY]._book_ticker[test_symbol]
        sell_ticker = mock_system.public_exchanges[Side.SELL]._book_ticker[test_symbol]
        
        print(f"‚úÖ Market data control working: Buy={buy_ticker.bid_price}, Sell={sell_ticker.ask_price}")
        
        # Test order placement
        order = await mock_system.private_exchanges[Side.BUY].place_limit_order(
            symbol=test_symbol,
            side=Side.BUY,
            quantity=0.1,
            price=50000.0
        )
        
        print(f"‚úÖ Order placement working: {order.order_id}")
        
        # Cleanup
        await mock_system.teardown()
        
        print("üéâ Mock system test passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Mock system test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_data_factories():
    """Test the data factory system."""
    print("\nüß™ Testing Data Factories...")
    
    try:
        from exchanges.structs import Symbol, Side, ExchangeEnum
        from exchanges.structs.common import AssetName
        
        # Test basic symbol creation
        symbol = Symbol(base=AssetName('BTC'), quote=AssetName('USDT'))
        print(f"‚úÖ Symbol creation: {symbol}")
        
        # Test order generation with manual creation
        from exchanges.structs import Order, OrderType, OrderStatus
        from exchanges.structs.common import TimeInForce
        import time
        
        order = Order(
            symbol=symbol,
            order_id="test_order_123",
            side=Side.BUY,
            order_type=OrderType.LIMIT,
            quantity=0.1,
            price=50000.0,
            filled_quantity=0.0,
            status=OrderStatus.NEW,
            timestamp=int(time.time() * 1000),
            time_in_force=TimeInForce.GTC
        )
        
        print(f"‚úÖ Order creation: {order.order_id}")
        
        # Test book ticker creation
        from exchanges.structs import BookTicker
        
        ticker = BookTicker(
            symbol=symbol,
            bid_price=49999.0,
            bid_quantity=1.0,
            ask_price=50001.0,
            ask_quantity=1.0,
            timestamp=int(time.time() * 1000)
        )
        
        print(f"‚úÖ BookTicker creation: {ticker.spread}")
        
        print("üéâ Data factories test passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Data factories test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_basic_integration():
    """Test basic integration between components."""
    print("\nüß™ Testing Basic Integration...")
    
    try:
        from tests.trading.mocks import DualExchangeMockSystem
        from exchanges.structs import Symbol, ExchangeEnum, Side
        from exchanges.structs.common import AssetName
        
        # Create test symbol
        symbol = Symbol(base=AssetName('BTC'), quote=AssetName('USDT'))
        
        # Setup mock system with patching
        mock_system = DualExchangeMockSystem()
        await mock_system.setup([symbol])
        mock_system.patch_exchange_factory()
        
        print("‚úÖ Mock system with patches initialized")
        
        # Test that we can import config with mocked functions
        try:
            from config.config_manager import get_exchange_config
            config = get_exchange_config(ExchangeEnum.MEXC)
            print(f"‚úÖ Mocked config retrieval working: {config.exchange}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Config mock test failed (may be expected): {e}")
        
        # Test order flow
        private_exchange = mock_system.private_exchanges[Side.BUY]
        
        # Place order
        order = await private_exchange.place_limit_order(
            symbol=symbol,
            side=Side.BUY,
            quantity=0.1,
            price=50000.0
        )
        
        # Simulate partial fill
        private_exchange.simulate_order_fill(order.order_id, 0.05)
        
        # Fetch updated order
        updated_order = await private_exchange.fetch_order(symbol, order.order_id)
        
        print(f"‚úÖ Order lifecycle test: {updated_order.filled_quantity} filled")
        
        # Cleanup
        await mock_system.teardown()
        
        print("üéâ Basic integration test passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Basic integration test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """Run all simple tests."""
    print("üöÄ Starting Simple Delta Neutral Testing Framework Tests\n")
    
    tests = [
        ("Mock System", test_mock_system),
        ("Data Factories", test_data_factories),
        ("Basic Integration", test_basic_integration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"{'='*50}")
        print(f"Running: {test_name}")
        print('='*50)
        
        try:
            success = await test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {e}")
            results.append((test_name, False))
    
    # Summary
    print(f"\n{'='*50}")
    print("TEST SUMMARY")
    print('='*50)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if success:
            passed += 1
    
    print(f"\nResults: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("üéâ All simple tests passed!")
        print("\nüìù Testing Framework Summary:")
        print("‚úÖ Mock dual exchange system operational")
        print("‚úÖ Data structures and factories working")
        print("‚úÖ Basic order lifecycle simulation functional")
        print("‚úÖ Market data control and price simulation working")
        print("‚úÖ Patch system for dependency injection operational")
        print("\nüöÄ Framework ready for comprehensive delta neutral task testing!")
        return 0
    else:
        print("üí• Some tests failed!")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Tests interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Test runner failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)