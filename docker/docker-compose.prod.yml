version: '3.8'

# Production override configuration
# This file extends docker-compose.yml for production deployment

services:
  # Database with production security settings
  database:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-arbitrage_data}
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TIMESCALEDB_TELEMETRY: off
      # Production PostgreSQL settings
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    
    # Production volume configuration
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups:/backups  # Backup directory
    
    # Remove port exposure for security (internal access only)
    ports: []
    
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    # Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-arbitrage_user} -d ${POSTGRES_DB:-arbitrage_data}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Data collector with production settings
  data_collector:
    environment:
      # Database credentials
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-arbitrage_data}
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Also provide DB_* for backward compatibility
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-arbitrage_data}
      DB_USER: ${POSTGRES_USER:-arbitrage_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Application settings
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Production exchange API credentials
      MEXC_API_KEY: ${MEXC_API_KEY}
      MEXC_SECRET_KEY: ${MEXC_SECRET_KEY}
      GATEIO_API_KEY: ${GATEIO_API_KEY}
      GATEIO_SECRET_KEY: ${GATEIO_SECRET_KEY}
    
    # Production logging
    volumes:
      - ./logs:/app/logs
      - ../config.yaml:/app/config.yaml:ro
      - ../src:/app/src:ro
    
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.4'
    
    # Enhanced health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=5)"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s

  # PgAdmin with production security (optional, profiles-controlled)
  pgadmin:
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'  # Enable server mode for production
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
      PGADMIN_CONFIG_LOGIN_BANNER: "Production CEX Arbitrage Database"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 30  # WARNING level
    
    # Remove exposed ports for security (use reverse proxy)
    ports: []
    
    # Additional security volumes
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ./ssl:/etc/ssl/pgadmin:ro  # SSL certificates
    
    # Production profiles
    profiles:
      - admin
      - management

  # Grafana with production security
  grafana:
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-$(openssl rand -hex 32)}
      
      # Production security settings
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"  # Disable anonymous access
      
      # Performance settings
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: database:5432
      GF_DATABASE_NAME: ${POSTGRES_DB:-arbitrage_data}
      GF_DATABASE_USER: ${POSTGRES_USER:-arbitrage_user}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Logging
      GF_LOG_LEVEL: warn
      GF_LOG_MODE: console
    
    # Remove exposed ports (use reverse proxy)
    ports: []
    
    # Enhanced volumes for production
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./ssl:/etc/ssl/grafana:ro  # SSL certificates
    
    # Production profiles
    profiles:
      - monitoring
      - management
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: arbitrage_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/htpasswd:/etc/nginx/htpasswd:ro
    depends_on:
      - grafana
      - pgadmin
    networks:
      - arbitrage_network
    profiles:
      - production
      - management
    restart: unless-stopped

# Production volumes with backup support
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/arbitrage/data/postgres
  
  pgadmin_data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: /opt/arbitrage/data/pgadmin
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/arbitrage/data/grafana