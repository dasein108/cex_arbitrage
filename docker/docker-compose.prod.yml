version: '3.8'

# Production override configuration
# This file extends docker-compose.yml for production deployment

services:
  # Database optimized for 4GB RAM server
  database:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-arbitrage_data}
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TIMESCALEDB_TELEMETRY: off
      # Production PostgreSQL settings
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      # Memory-optimized PostgreSQL configuration
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_MAX_CONNECTIONS: 50
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
    
    # Production volume configuration
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups:/backups
    
    # Remove port exposure for security (internal access only)
    ports: []
    
    # Optimized resource limits for 4GB server
    deploy:
      resources:
        limits:
          memory: 1800M  # Reduced from 2G to leave room for OS
          cpus: '2.0'    # Increased CPU allocation
        reservations:
          memory: 1200M  # Minimum guaranteed
          cpus: '1.0'
    
    # Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-arbitrage_user} -d ${POSTGRES_DB:-arbitrage_data}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Data collector optimized for minimal memory usage
  data_collector:
    command: ["python", "src/applications/data_collection/run.py"]
    environment:
      # Database credentials
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-arbitrage_data}
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Also provide DB_* for backward compatibility
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-arbitrage_data}
      DB_USER: ${POSTGRES_USER:-arbitrage_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Application settings
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Production exchange API credentials
      MEXC_API_KEY: ${MEXC_API_KEY}
      MEXC_SECRET_KEY: ${MEXC_SECRET_KEY}
      GATEIO_API_KEY: ${GATEIO_API_KEY}
      GATEIO_SECRET_KEY: ${GATEIO_SECRET_KEY}
      
      # Memory optimization settings
      PYTHONOPTIMIZE: 1
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    
    # Production logging
    volumes:
      - ./logs:/app/logs
      - ../config.yaml:/app/config.yaml:ro
      - ../src:/app/src:ro
    
    # Reduced resource limits for small server
    deploy:
      resources:
        limits:
          memory: 800M   # Reduced from 1G
          cpus: '1.5'    # Increased CPU allocation
        reservations:
          memory: 400M   # Reduced minimum
          cpus: '0.5'
    
    # Simplified health check (avoid HTTP overhead)
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PgAdmin - DISABLED by default in production (optional via profiles)
  pgadmin:
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
      PGADMIN_CONFIG_LOGIN_BANNER: "Production CEX Arbitrage Database"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 30
    
    # Expose port for optional use (can be started on-demand)
    ports:
      - "8080:80"
    
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    
    # Disabled by default - enable with: docker-compose --profile admin up pgadmin
    profiles:
      - admin
    
    # Minimal resource allocation for when enabled
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: '0.5'
        reservations:
          memory: 150M
          cpus: '0.1'

  # Grafana - DISABLED by default in production (optional via profiles)
  grafana:
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      
      # Minimal production settings
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_LOG_LEVEL: warn
      GF_LOG_MODE: console
      
      # Database connection
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: database:5432
      GF_DATABASE_NAME: ${POSTGRES_DB:-arbitrage_data}
      GF_DATABASE_USER: ${POSTGRES_USER:-arbitrage_user}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    
    # Expose port for optional use
    ports:
      - "3000:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
    
    # Disabled by default - enable with: docker-compose --profile monitoring up grafana
    profiles:
      - monitoring
    
    # Minimal resource allocation for when enabled
    deploy:
      resources:
        limits:
          memory: 400M
          cpus: '0.5'
        reservations:
          memory: 200M
          cpus: '0.1'

  # Nginx reverse proxy - DISABLED (not needed for direct access)
  # nginx:
  #   image: nginx:alpine
  #   container_name: arbitrage_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #     - ./nginx/htpasswd:/etc/nginx/htpasswd:ro
  #   depends_on:
  #     - grafana
  #     - pgadmin
  #   networks:
  #     - arbitrage_network
  #   profiles:
  #     - nginx
  #   restart: unless-stopped

# Production volumes with backup support
# For local testing, we'll use Docker managed volumes
# For true production deployment, these should be bind mounts to persistent storage
volumes:
  postgres_data:
    driver: local
    # Production: bind mount to persistent storage
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /opt/arbitrage/data/postgres
  
  pgadmin_data:
    driver: local
    # Production: bind mount to persistent storage
    # driver_opts:
    #   type: none  
    #   o: bind
    #   device: /opt/arbitrage/data/pgadmin
  
  grafana_data:
    driver: local
    # Production: bind mount to persistent storage
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /opt/arbitrage/data/grafana